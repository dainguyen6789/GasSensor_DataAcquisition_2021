C51 COMPILER V9.52.0.0   KEYPAD                                                            05/01/2019 10:51:07 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE KEYPAD
OBJECT MODULE PLACED IN .\Obj\KeyPad.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Application\Source\KeyPad.c LARGE BROWSE INCDIR(.\Application\Header) DE
                    -BUG OBJECTEXTEND PRINT(.\Lis\KeyPad.lst) TABS(2) OBJECT(.\Obj\KeyPad.obj)

line level    source

   1          #include "stc15f2k60s2.h"
   2          #include "KeyPad.h"
   3          #include "PCF85063BTL.h"
   4          #include "LCD_Driver_SPLC780D.h"
   5          //#include "Receiver_Position_Data.h"
   6          
   7          void DisplayLCD(unsigned char BCD);
   8          void WriteData(unsigned char dat);
   9          
  10          void SPI_WriteTime(unsigned char val,unsigned char addr);
  11          void Command(unsigned char dat);
  12          void LCD_clear(void);
  13          
  14          bit move=0;
  15          bit small_move=0;
  16          bit direction=0;
  17          int auto_mode=0;
  18          //bit  calib_mode=1;
  19          void Delay_ms(unsigned int ms)
  20          {
  21   1        unsigned int De_Cnt;
  22   1        while( (ms--) != 0)
  23   1        {
  24   2          for(De_Cnt = 0; De_Cnt < 600; De_Cnt++); 
  25   2        }             
  26   1      }
  27          unsigned char Key_Scan(void)
  28          {
  29   1        unsigned char KeyTemp1,KeyTemp2;
  30   1        unsigned char KeyValue;
  31   1      
  32   1        //
  33   1        KEYPORT &=(~((1<<Column1)|(1<<Column2)|(1<<Column3)|(1<<Column4))); // ~(00000010 | 00000100 | 00001000)=
             -1111*000*1: set three columns equal to Zero
  34   1        //
  35   1        //0010 0000
  36   1        KEYPORT |= (1<<Line1) | (1<<Line2) | (1<<Line3) | (1<<Line4) ;  //10000000 | 01000000 | 00100000=*111*000
             -00: Set three columns equal to 1
  37   1        //    
  38   1        KeyTemp1=KEYPORT | (~((1<<Line1)|(1<<Line2)|(1<<Line3)|(1<<Line4)));  //~(10000000 | 01000000 | 00100000)=
             -00011111
  39   1        if(KeyTemp1!=0xff)      //
  40   1        { 
  41   2          //Delay_ms(10);         //
  42   2          KeyTemp1=KEYPORT | ( ~((1<<Line1)|(1<<Line2)|(1<<Line3)|(1<<Line4)) );  //~(10000000 | 01000000 | 0010000
             -0)=00011111
  43   2          if(KeyTemp1!=0xff)      //
  44   2          {
  45   3            //COL1 COL2 COL3
  46   3            //0     1     1
  47   3            KEYPORT &=(~(1<<Column1)); //0 1 1 1
  48   3            KEYPORT |= (1<<Column2)|(1<<Column3)|(1<<Column4);//
  49   3            KeyTemp1=KEYPORT | (~((1<<Line1)|(1<<Line2)|(1<<Line3)|(1<<Line4)));//  KEYPORT | 00011111
  50   3            if(KeyTemp1!=0xff)      //
C51 COMPILER V9.52.0.0   KEYPAD                                                            05/01/2019 10:51:07 PAGE 2   

  51   3            {
  52   4              while(KeyTemp1!=0xff) // if pressed any key on COL1
  53   4              { 
  54   5                KeyTemp2=KeyTemp1;  
  55   5                KeyTemp1=KEYPORT | (~((1<<Line1)|(1<<Line2)|(1<<Line3)|(1<<Line4)));  // read the data, KEYPORT is the
             - instantaneous value of the PORT.
  56   5              }
  57   4              // run when unpress
  58   4              switch(KeyTemp2)
  59   4              {
  60   5                case ~(1<<Line1):     //S6°
  61   5                {
  62   6                  KeyValue=KEY1;
  63   6                
  64   6                }break;
  65   5                case ~(1<<Line2):     //S9°
  66   5                {
  67   6                  KeyValue=KEY4;
  68   6                
  69   6                }break;
  70   5                case ~(1<<Line3):     //S9°
  71   5                {
  72   6                  KeyValue=KEY7;
  73   6                
  74   6                }break; 
  75   5                case ~(1<<Line4):     //
  76   5                {
  77   6                  KeyValue=KEY_Star;
  78   6                
  79   6                }break;         
  80   5              }
  81   4            }   
  82   3            //COL1 COL2 COL3
  83   3            //1     0     1
  84   3            KEYPORT &=(~(1<<Column2)); 
  85   3            KEYPORT |= (1<<Column1)|(1<<Column3)|(1<<Column4);
  86   3            KeyTemp1=KEYPORT | (~((1<<Line1)|(1<<Line2)|(1<<Line3)|(1<<Line4)));      //
  87   3            if(KeyTemp1!=0xff)      //
  88   3            {
  89   4              while(KeyTemp1!=0xff) //
  90   4              { 
  91   5                KeyTemp2=KeyTemp1;  
  92   5                KeyTemp1=KEYPORT | (~((1<<Line1)|(1<<Line2)|(1<<Line3)|(1<<Line4))); //
  93   5              }
  94   4              switch(KeyTemp2)
  95   4              {
  96   5                case ~(1<<Line1):     //
  97   5                {
  98   6                  KeyValue=KEY2;
  99   6                
 100   6                }break;
 101   5                case ~(1<<Line2):     //
 102   5                {
 103   6                  KeyValue=KEY5;
 104   6                
 105   6                }break;
 106   5                case ~(1<<Line3):     //
 107   5                {
 108   6                  KeyValue=KEY8;
 109   6                
 110   6                }break;   
 111   5                case ~(1<<Line4):     //
C51 COMPILER V9.52.0.0   KEYPAD                                                            05/01/2019 10:51:07 PAGE 3   

 112   5                {
 113   6                  KeyValue=KEY0;
 114   6                
 115   6                }break;           
 116   5              }
 117   4            }
 118   3            //COL1 COL2 COL3
 119   3            //1     1     0
 120   3            KEYPORT &=(~(1<<Column3)); //1 1 0
 121   3            KEYPORT |= (1<<Column1)|(1<<Column2)|(1<<Column4);
 122   3            KeyTemp1=KEYPORT | (~((1<<Line1)|(1<<Line2)|(1<<Line3)|(1<<Line4)));     //
 123   3            if(KeyTemp1!=0xff)      //
 124   3            {
 125   4              while(KeyTemp1!=0xff) // if pressed any key of COL3
 126   4              { 
 127   5                KeyTemp2=KeyTemp1;  
 128   5                KeyTemp1=KEYPORT | (~((1<<Line1)|(1<<Line2)|(1<<Line3)|(1<<Line4)));//
 129   5              }
 130   4              switch(KeyTemp2)
 131   4              {
 132   5                case ~(1<<Line1):     //S8°
 133   5                {
 134   6                  KeyValue=KEY3;
 135   6                
 136   6                }break;
 137   5                case ~(1<<Line2):     //S11°
 138   5                {
 139   6                  KeyValue=KEY6;
 140   6                
 141   6                }break;
 142   5                case ~(1<<Line3):     //S11°
 143   5                {
 144   6                  KeyValue=KEY9;
 145   6                
 146   6                }break;   
 147   5                case ~(1<<Line4):     //
 148   5                {
 149   6                  KeyValue=KEY_SHARP;
 150   6                
 151   6                }break;         
 152   5              }
 153   4            } 
 154   3      
 155   3            //COL1 COL2 COL3 COL4
 156   3            //1     1     1   0
 157   3            KEYPORT &=(~(1<<Column4)); //1 1 1 0
 158   3            KEYPORT |= (1<<Column1)|(1<<Column2)|(1<<Column3);
 159   3            KeyTemp1=KEYPORT | (~((1<<Line1)|(1<<Line2)|(1<<Line3)|(1<<Line4)));     //
 160   3            if(KeyTemp1!=0xff)      //
 161   3            {
 162   4              while(KeyTemp1!=0xff) // if pressed any key of COL3
 163   4              { 
 164   5                KeyTemp2=KeyTemp1;  
 165   5                KeyTemp1=KEYPORT | (~((1<<Line1)|(1<<Line2)|(1<<Line3)|(1<<Line4)));//
 166   5              }
 167   4              switch(KeyTemp2)
 168   4              {
 169   5                case ~(1<<Line1):     //S8°
 170   5                {
 171   6                  KeyValue=KEY_A;
 172   6                
 173   6                }break;
C51 COMPILER V9.52.0.0   KEYPAD                                                            05/01/2019 10:51:07 PAGE 4   

 174   5                case ~(1<<Line2):     //S11°
 175   5                {
 176   6                  KeyValue=KEY_B;
 177   6                
 178   6                }break;
 179   5                case ~(1<<Line3):     //S11°
 180   5                {
 181   6                  KeyValue=KEY_C;
 182   6                
 183   6                }break;   
 184   5                case ~(1<<Line4):     //
 185   5                {
 186   6                  KeyValue=KEY_D;
 187   6                
 188   6                }break;         
 189   5              }
 190   4            } 
 191   3            
 192   3            return  KeyValue; 
 193   3          }             
 194   2          else
 195   2          {
 196   3            return Unpress;       
 197   3          }
 198   2        }
 199   1        else
 200   1        {
 201   2          return Unpress; 
 202   2        }     
 203   1      }
 204          void Key_Process(void)//
 205          {
 206   1        static char KeyCount=0;
 207   1        static unsigned int KeyNum_Old,KeyNum,PressedKey[5];
 208   1        unsigned int d,hours,mins,months,days;
 209   1        KeyNum_Old=KeyNum;
 210   1        KeyNum=Key_Scan();
 211   1        //if( (KeyNum=Key_Scan())!=0 )    //
 212   1        if (KeyNum==KEY_B )
 213   1        {
 214   2          small_move=1;
 215   2          return;
 216   2        } 
 217   1        if (KeyNum_Old==Unpress && KeyNum==KEY_C)
 218   1        {
 219   2          if(direction)
 220   2            direction=0;
 221   2          else 
 222   2            direction=1;
 223   2          return;
 224   2        }
 225   1        if (KeyNum==KEY_D && !move)
 226   1        {
 227   2          move =1;
 228   2          return;
 229   2        } 
 230   1        if (KeyNum==KEY_D && move)
 231   1        {
 232   2          move =0;
 233   2          return;
 234   2        }
 235   1        if (KeyNum_Old==Unpress && KeyNum==KEY_A )
C51 COMPILER V9.52.0.0   KEYPAD                                                            05/01/2019 10:51:07 PAGE 5   

 236   1        {
 237   2          if(auto_mode)
 238   2            auto_mode=0;
 239   2          else
 240   2            auto_mode=1;
 241   2          return;
 242   2        } 
 243   1      
 244   1        
 245   1      
 246   1        /*if (KeyNum_Old==Unpress && KeyNum==KEY_B)
 247   1        {
 248   1          small_move=0;
 249   1          return;
 250   1        }   */
 251   1        if(KeyNum_Old==Unpress && KeyNum!=Unpress)
 252   1        {
 253   2          PressedKey[KeyCount]=KeyNum;
 254   2          KeyCount++;
 255   2          if(KeyCount==5)
 256   2          {
 257   3            //PressedKey[]="";
 258   3            KeyCount=0;
 259   3            //=========================================================================     
 260   3            // Set Hour,Minute
 261   3            //=========================================================================
 262   3      
 263   3            
 264   3            if(PressedKey[4]==KEY_SHARP )// set hour, minute
 265   3            { 
 266   4              hours=PressedKey[0]*10+PressedKey[1];
 267   4              mins=PressedKey[2]*10+PressedKey[3];
 268   4              if(hours<=24 && mins<=60)
 269   4              {
 270   5                SPI_WriteTime((PressedKey[0]<<4)|PressedKey[1],Hours);//Write BCD value
 271   5                SPI_WriteTime((PressedKey[2]<<4)|PressedKey[3],Minutes);//Write BCD value
 272   5              }
 273   4            }
 274   3            //=========================================================================     
 275   3            // Set Month,Day      
 276   3            //=========================================================================
 277   3      
 278   3            else if (PressedKey[4]==KEY_Star)//Set month and day
 279   3            {
 280   4              months=PressedKey[0]*10+PressedKey[1];
 281   4              days=PressedKey[2]*10+PressedKey[3];
 282   4              if(months<=7)//1..7
 283   4              {
 284   5                if(months%2)//month has 31 days,1 3 5 7 
 285   5                {
 286   6                  if(days<=31)
 287   6                  {
 288   7                    SPI_WriteTime((PressedKey[0]<<4)|PressedKey[1],Months);//Write BCD value
 289   7                    SPI_WriteTime((PressedKey[2]<<4)|PressedKey[3],Days);//Write BCD value              
 290   7                  }
 291   6                }
 292   5                else //2 4 6 
 293   5                {
 294   6                  if (months==2)//February
 295   6                  {
 296   7                    if(days<=28)
 297   7                    {
C51 COMPILER V9.52.0.0   KEYPAD                                                            05/01/2019 10:51:07 PAGE 6   

 298   8                      SPI_WriteTime((PressedKey[0]<<4)|PressedKey[1],Months);//Write BCD value
 299   8                      SPI_WriteTime((PressedKey[2]<<4)|PressedKey[3],Days);//Write BCD value              
 300   8                    }             
 301   7                    
 302   7                  }
 303   6                  else //4 6 
 304   6                  {
 305   7                    if(days<=30)
 306   7                    {
 307   8                      SPI_WriteTime((PressedKey[0]<<4)|PressedKey[1],Months);//Write BCD value
 308   8                      SPI_WriteTime((PressedKey[2]<<4)|PressedKey[3],Days);//Write BCD value              
 309   8                    }                 
 310   7                    
 311   7                  }
 312   6                      
 313   6                }
 314   5              }
 315   4              else  //8..12
 316   4              {
 317   5                if(!(months%2))//month has 31 days,8 10 12
 318   5                {
 319   6                  if(days<=31)
 320   6                  {
 321   7                    SPI_WriteTime((PressedKey[0]<<4)|PressedKey[1],Months);//Write BCD value
 322   7                    SPI_WriteTime((PressedKey[2]<<4)|PressedKey[3],Days);//Write BCD value              
 323   7                  }
 324   6                }
 325   5                else //9 11
 326   5                {
 327   6                    if(days<=30)
 328   6                    {
 329   7                      SPI_WriteTime((PressedKey[0]<<4)|PressedKey[1],Months);//Write BCD value
 330   7                      SPI_WriteTime((PressedKey[2]<<4)|PressedKey[3],Days);//Write BCD value              
 331   7                    }                 
 332   6                }
 333   5              }
 334   4            }   
 335   3            
 336   3            if(PressedKey[0]==KEY9&&PressedKey[1]==KEY9&&PressedKey[2]==KEY9&&PressedKey[3]==KEY9&&PressedKey[4]==K
             -EY0)// 
 337   3            {
 338   4              SPI_NOR_ClearEnable=1;
 339   4            }
 340   3            if(SPI_NOR_ClearEnable==0)
 341   3            {
 342   4              LCD_clear();
 343   4              Command(0x08);
 344   4              Command(0x00);      
 345   4              WriteData(0x68);//display "h"
 346   4              WriteData(0x68);//display "h"
 347   4              WriteData(0x6D);//display "m"
 348   4              WriteData(0x6D);//display "m"
 349   4              WriteData(0x23);//display "#" SETTIME_KEY   
 350   4            }       
 351   3          }
 352   2          //LCD Display the pressed buttons
 353   2        for(d=0;d<KeyCount;d++)
 354   2        {
 355   3          if(KeyCount<=4)
 356   3          {
 357   4            Command(0x08);
 358   4            Command(0x00+d);
C51 COMPILER V9.52.0.0   KEYPAD                                                            05/01/2019 10:51:07 PAGE 7   

 359   4            WriteData(PressedKey[d]|0x30);
 360   4          }
 361   3        } 
 362   2      
 363   2        }
 364   1        
 365   1      
 366   1        
 367   1      }
 368          /***********************************************
 369          ************************************************/
 370          void KeyPad_IO_Init(void)
 371          { 
 372   1        P0M1 &=~( (1<<0)|(1<<1) | (1<<2) | (1<<3) | (1<<4) | (1<<5) | (1<<6) | (1<<7) );  
 373   1        P0M0 &=~( (1<<0)|(1<<1) | (1<<2) | (1<<3) | (1<<4) | (1<<5) | (1<<6) | (1<<7) );    
 374   1        P0M0=0x00;
 375   1        P0M1=0x00;
 376   1      }
 377          
 378          
 379          
 380          
 381          
 382          
 383          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1371    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     17       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
