C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/28/2019 13:42:08 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE CALIBRATION
OBJECT MODULE PLACED IN .\Obj\Calibration.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Calibration.c LARGE BROWSE INCDIR(.\Application\Header) DEBUG OBJECTEXTE
                    -ND PRINT(.\Lis\Calibration.lst) TABS(2) OBJECT(.\Obj\Calibration.obj)

line level    source

   1          //#include "ADCh.h"
   2          #include "stc15f2k60s2.h"
   3          #include <stdio.h>
   4          #include <stdlib.h>
   5          #include "ADCh.h"
   6          #include "AT25SF041.h"
   7          #include "SI1120.h"
   8          #define  offset_error 0.8
   9          
  10          void Wait_ms(int ms);
  11          unsigned int ADC_GetResult(unsigned char ch);
  12          void Move(float  distance, bit direction);
  13          unsigned int Max_Value(unsigned int *input);
  14          void Update_position(unsigned char mnths,unsigned char dys,
  15                               unsigned char hurs,unsigned char mns,unsigned char sconds,
  16                               float  *currnt_pos, float offset_calib);
  17          unsigned int Day_Of_Year(unsigned char months_bcd,unsigned char days_bcd); // this function is used to cou
             -nt the date in a year example: 22 March is the 80th day of the year
  18          void WriteData(unsigned char dat);
  19          void Command(unsigned char dat);//dat=0x0X
  20          void Display_Pos(float sign_dat);
  21          // read adc ch to sense the voltage of the solar panel.     
  22          
  23          int voltage_is_stable(void)
  24          {
  25   1        unsigned int sample_voltage[10];
  26   1        int i,ch=0;
  27   1        for (i=0; i<10;i++)
  28   1        {
  29   2              sample_voltage[i]=ADC_GetResult(ch);
  30   2        }
  31   1        
  32   1        for(i=1;i<=9;i++)
  33   1        {
  34   2              if(abs(sample_voltage[i]-sample_voltage[0])>ADC_Stable_Threshold)
  35   2                return 0;
  36   2        }
  37   1        return 1;
  38   1      }
  39          void  Find_Real_Max(float  *current_position, unsigned int *calib_max_ADC_Value,unsigned int *max_ADC_JP_v
             -alue, unsigned long int *address_to_write)
  40          {
  41   1          unsigned char ch=0;
  42   1          float calib_step_move=0.5;
  43   1          //float offset_error=0.8;
  44   1          int voltage_at_scanned_pos[81],max_location, avg_voltage=0;
  45   1          int i,j;
  46   1          //float offset_error=0.8;
  47   1          // move/scan +`
  48   1          pwm_time_min=0;
  49   1          pwm_time_max=0;
  50   1          for(i=0;i<81;i++)// 81 values
  51   1          {
  52   2            voltage_at_scanned_pos[i]=0;
C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/28/2019 13:42:08 PAGE 2   

  53   2          }
  54   1          for(i=0;i<81;i++)
  55   1          {
  56   2              //if(ADC_GetResult(2)>=sunlight_ADC_Threshold)
  57   2              {
  58   3                //avg_voltage=0;
  59   3                for(j=0;j<5;j++)
  60   3                {
  61   4                  if(j==0)
  62   4                  {
  63   5                    avg_voltage=0;
  64   5                  }
  65   4                  avg_voltage+=ADC_GetResult(ch);
  66   4                  Wait_ms(2);
  67   4      
  68   4                }
  69   3                voltage_at_scanned_pos[i]=avg_voltage/5;
  70   3                if(pwm_time_min!=0)
  71   3                {
  72   4                  pwm_time_min=pwm_time_min<pwm_time?pwm_time_min:pwm_time;
  73   4                }
  74   3                else
  75   3                  pwm_time_min=pwm_time;
  76   3                
  77   3                pwm_time_max=pwm_time_max>pwm_time?pwm_time_max:pwm_time;
  78   3                //  Because the uC Flash Memory is almost full, 
  79   3                //  so I did not change/increase the size of "struct data_to_store"
  80   3                //  STORE THE CALIB VOLTAGE IN THE SPI NOR FLASH after every calib, total 4*60=240 byte of data for e
             -ach calib time
  81   3                //if(i%2==0)
  82   3                {
  83   4                  AT25SF041_WriteEnable();
  84   4                  //Wait_ms_SPINOR(50); 
  85   4                  AT25SF041_Write(Byte_Page_Program, *address_to_write,pwm_time/4);                 // SUNLIGHT
  86   4                  Wait_ms_SPINOR(50); 
  87   4                  ++*address_to_write;
  88   4                  
  89   4                  AT25SF041_WriteEnable();
  90   4                  //Wait_ms_SPINOR(50); 
  91   4                  AT25SF041_Write(Byte_Page_Program, *address_to_write,voltage_at_scanned_pos[i]/4);// SOLAR CELL ADC 
             -VOLTAGE  
  92   4                  Wait_ms_SPINOR(50); 
  93   4                  ++*address_to_write;
  94   4                  
  95   4                  AT25SF041_WriteEnable();
  96   4                  //Wait_ms_SPINOR(50); 
  97   4                  AT25SF041_Write(Byte_Page_Program, *address_to_write,*current_position);          // SOLAR CELL Instant P
             -osition when calib
  98   4                  Wait_ms_SPINOR(50); 
  99   4                  ++*address_to_write;  
 100   4                  
 101   4                  AT25SF041_WriteEnable();
 102   4                  //Wait_ms_SPINOR(50); 
 103   4                  AT25SF041_Write(Byte_Page_Program, *address_to_write,(*current_position-(char)*current_position)*100
             -);  // SOLAR CELL Instant Position when calib
 104   4                  Wait_ms_SPINOR(50); 
 105   4                  ++*address_to_write;
 106   4        
 107   4                }
 108   3                
 109   3              }
 110   2              /*else
C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/28/2019 13:42:08 PAGE 3   

 111   2              {
 112   2                // go back to JP max position
 113   2                if(i<=29)
 114   2                  Move(calib_step_move*(29-(i-1)),1);//
 115   2                  //*current_position=*current_position+calib_step_move*(29-i);
 116   2                else
 117   2                  Move(calib_step_move*(i-1-29),0);// 
 118   2                
 119   2                *current_position=*current_position+calib_step_move*(29-(i-1));
 120   2                break;// break FOR LOOP
 121   2              }*/
 122   2              
 123   2              //move cursor to line 1, pos 6
 124   2              //Write_PI4IOE5V96248(&dat);
 125   2              Command(0x08);
 126   2              Command(0x05);
 127   2              
 128   2              WriteData(0x41);//display "A"
 129   2              WriteData(0x44);//display "D"
 130   2              WriteData(0x43);//display "C" 
 131   2              WriteData(0x3A);//display ":" 
 132   2              //LCD_clear();
 133   2              //real_voltage=(float)voltage_at_scanned_pos[i]/1024*5;
 134   2              Display_Pos((float)voltage_at_scanned_pos[i]/1024*5);
 135   2              WriteData(0x56);//display "V" 
 136   2              WriteData(0x10);//display " " 
 137   2              Wait_ms(200);
 138   2              
 139   2              Move(calib_step_move,1);//1: positive direction
 140   2              *current_position=*current_position+0.5;
 141   2              Wait_ms(800);// delay to wait for the electronic load to be stable.
 142   2      
 143   2          }
 144   1          Wait_ms(1000);
 145   1      
 146   1          if(i==81)// make sure that all of the calibration value are scanned with GOOD SUN
 147   1          {
 148   2            max_location=Max_Value(voltage_at_scanned_pos);//max_location in an array [0,...,80]
*** WARNING C182 IN LINE 148 OF Calibration.c: pointer to different objects
 149   2            *calib_max_ADC_Value=voltage_at_scanned_pos[max_location];
 150   2      
 151   2            *max_ADC_JP_value=voltage_at_scanned_pos[40];
 152   2          
 153   2            // move to the optimal position in the area of +/-10mm from JP max theorical pos
 154   2            Move(calib_step_move*(83-max_location),0);//83-81= 2 steps is the offset error
 155   2      //      Command(0x08);
 156   2      //      Command(0x06);
 157   2      //      
 158   2      //      WriteData(0x50);//display "P"
 159   2      //      //WriteData(0x4F);//display ""
 160   2      //      WriteData(0x53);//display "S" 
 161   2      //      WriteData(0x3A);//display ":" 
 162   2      //      //LCD_clear();
 163   2      //      Display_Pos(83-max_location);
 164   2            *current_position=*current_position-(calib_step_move*(83-max_location));
 165   2            Wait_ms(500);
 166   2          }
 167   1          return ;
 168   1      
 169   1      }
 170          
 171          
C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/28/2019 13:42:08 PAGE 4   

 172          unsigned int Max_Value(unsigned int *input)
 173          {
 174   1        unsigned int max=0,max_location=40,i;
 175   1        //int i;
 176   1        for(i=0;i<81;i++) //total 81 diff values
 177   1        {
 178   2          max=max>*(input+i)? max:*(input+i);
 179   2          if (max==*(input+i)&& max!=0)
 180   2            max_location=i;
 181   2        }
 182   1        return max_location;// pos in the array
 183   1        
 184   1      }
 185          //input currnt_pos is the JP max theorical position
 186          float calibration(    unsigned char mnths,unsigned char dys,
 187                                unsigned char hurs,unsigned char mns,unsigned char sconds,
 188                                float  *currnt_pos,unsigned int *calib_max_ADC_Val,float *theorical_max_pos,
 189                                unsigned int *max_ADC_JP_value,unsigned long int *NOR_address_to_write)
 190          {
 191   1        float calib_value=0;
 192   1        unsigned int temporary_calib_max_ADC=0,temp_max_ADC_JP_value=0;//
 193   1        unsigned long int temp_NOR_address_to_write=*NOR_address_to_write;
 194   1        float JP_max_pos=*currnt_pos;
 195   1        *calib_max_ADC_Val=0;
 196   1        *max_ADC_JP_value=0;
 197   1        *theorical_max_pos=0;
 198   1        pwm_time_min=0;
 199   1        pwm_time_max=0;
 200   1        // if voltage is stable 
 201   1        if(voltage_is_stable())
 202   1        {
 203   2          //  move to JP theorical max position-20
 204   2          Update_position(mnths,dys,hurs,mns,sconds,&JP_max_pos,-20);// off set is Zero means we go to  (first, go
             - to JP max theorical position -20)
 205   2          *theorical_max_pos=JP_max_pos+20;// compensate +20 because of previous line.
 206   2          //  find the real max value in the area of JP +/- 15mm
 207   2          Find_Real_Max(&JP_max_pos,&temporary_calib_max_ADC,&temp_max_ADC_JP_value,&temp_NOR_address_to_write); /
             -/find real max and move to real max position
 208   2          
 209   2          *NOR_address_to_write=temp_NOR_address_to_write;
 210   2          
 211   2          *calib_max_ADC_Val=temporary_calib_max_ADC;
 212   2          *max_ADC_JP_value=temp_max_ADC_JP_value;
 213   2          calib_value=JP_max_pos-*theorical_max_pos;
 214   2          *currnt_pos=JP_max_pos;
 215   2          return calib_value;
 216   2        }
 217   1        else
 218   1          return 0;
 219   1      }
 220          int FindClosestSamedayCalibTime(int *input_calibration_bool_array,int current_time_stamp_position)
 221          {
 222   1        int i;
 223   1        for(i=current_time_stamp_position;i>=0;i--)
 224   1        {
 225   2          if(*(input_calibration_bool_array+i)==1)// find the closest calibrated time stamp
 226   2            return i;// return the position in the array
 227   2          else 
 228   2            return 0;
 229   2        }
 230   1      }
*** WARNING C291 IN LINE 230 OF Calibration.c: not every exit path returns a value
C51 COMPILER V9.52.0.0   CALIBRATION                                                       05/28/2019 13:42:08 PAGE 5   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2111    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     251
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
