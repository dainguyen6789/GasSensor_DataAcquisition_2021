C51 COMPILER V9.52.0.0   CALIBRATION                                                       10/16/2018 11:42:09 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE CALIBRATION
OBJECT MODULE PLACED IN .\Obj\Calibration.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Calibration.c LARGE BROWSE INCDIR(.\Application\Header) DEBUG OBJECTEXTE
                    -ND PRINT(.\Lis\Calibration.lst) TABS(2) OBJECT(.\Obj\Calibration.obj)

line level    source

   1          //#include "ADCh.h"
   2          #include "stc15f2k60s2.h"
   3          #include <stdio.h>
   4          #include <stdlib.h>
   5          #include "ADCh.h"
   6          
   7          unsigned int ADC_GetResult(unsigned char ch);
   8          void Move(float  distance, bit direction);
   9          unsigned int Max_Value(unsigned int *input);
  10          void Update_position(unsigned char mnths,unsigned char dys,
  11                               unsigned char hurs,unsigned char mns,unsigned char sconds,
  12                               float  *currnt_pos);
  13          unsigned int Day_Of_Year(unsigned char months_bcd,unsigned char days_bcd); // this function is used to cou
             -nt the date in a year example: 22 March is the 80th day of the year
  14          
  15          // read adc ch to sense the voltage of the solar panel.     
  16          
  17          int voltage_is_stable(void)
  18          {
  19   1        unsigned int sample_voltage[10];
  20   1        int i,ch=0;
  21   1        for (i=0; i<10;i++)
  22   1        {
  23   2              sample_voltage[i]=ADC_GetResult(ch);
  24   2        }
  25   1        
  26   1        for(i=1;i<=9;i++)
  27   1        {
  28   2              if(abs(sample_voltage[i]-sample_voltage[0])>ADC_Stable_Threshold)
  29   2                return 0;
  30   2        }
  31   1        return 1;
  32   1      }
  33          void  Find_Real_Max(float  *current_position)
  34          {
  35   1        unsigned char ch=0;
  36   1        float calib_step_move=0.5;
  37   1        unsigned int voltage_at_scanned_pos[40],max_location;
  38   1        int i;
  39   1        // move/scan +direction
  40   1        for(i=1;i<=20;i++)
  41   1        {
  42   2          Move(calib_step_move,1);
  43   2          *current_position=*current_position+0.5;
  44   2          voltage_at_scanned_pos[20+i]=ADC_GetResult(ch);
  45   2        }
  46   1        // go back to JP max theorical position
  47   1          Move(-calib_step_move*20,1);
  48   1          *current_position=*current_position-10; 
  49   1        // move/scan -direction
  50   1        for (i=1;i<=20;i++)
  51   1        {
  52   2      
  53   2            Move(calib_step_move,-1);
C51 COMPILER V9.52.0.0   CALIBRATION                                                       10/16/2018 11:42:09 PAGE 2   

  54   2            *current_position=*current_position+0.5;
  55   2            voltage_at_scanned_pos[i]=ADC_GetResult(ch);
  56   2        }
  57   1        
  58   1        max_location=Max_Value(voltage_at_scanned_pos);//max_location in an array [0,...,39]
  59   1        // move to the optimal position in the area of +/-10mm from JP max theorical pos
  60   1        Move(calib_step_move*max_location,1);
  61   1        *current_position=*current_position+calib_step_move*max_location;
  62   1      
  63   1      }
  64          
  65          
  66          unsigned int Max_Value(unsigned int *input)
  67          {
  68   1        unsigned int max,max_location;
  69   1        int i;
  70   1        for(i=0;i<=39;i++)
  71   1        {
  72   2          max=max>*(input+i)? max:*(input+i);
  73   2          if (max==*(input+i))
  74   2            max_location=i;
  75   2        }
  76   1        return max_location;// pos in the array
  77   1        
  78   1      }
  79          //input currnt_pos is the JP max theorical position
  80          float calibration(unsigned char mnths,unsigned char dys,
  81                               unsigned char hurs,unsigned char mns,unsigned char sconds,
  82                               float  *currnt_pos)
  83          {
  84   1        float calib_value;
  85   1        float JP_max_pos=*currnt_pos;
  86   1        // if voltage is stable 
  87   1        if(voltage_is_stable())
  88   1        {
  89   2          //  move to JP theorical max position
  90   2          Update_position(mnths,dys,hurs,mns,sconds,&currnt_pos);
*** WARNING C182 IN LINE 90 OF Calibration.c: pointer to different objects
  91   2          //  find the real max value in the area of JP +/- 10mm
  92   2          Find_Real_Max(&currnt_pos); //find real max and move to real max position
*** WARNING C182 IN LINE 92 OF Calibration.c: pointer to different objects
  93   2          calib_value=*currnt_pos-JP_max_pos;
  94   2          return calib_value;
  95   2        }
  96   1        else
  97   1          return 0;
  98   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    957    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     132
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
