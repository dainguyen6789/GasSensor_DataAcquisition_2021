C51 COMPILER V9.52.0.0   CALIBRATION                                                       02/27/2019 14:50:34 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE CALIBRATION
OBJECT MODULE PLACED IN .\Obj\Calibration.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Calibration.c LARGE BROWSE INCDIR(.\Application\Header) DEBUG OBJECTEXTE
                    -ND PRINT(.\Lis\Calibration.lst) TABS(2) OBJECT(.\Obj\Calibration.obj)

line level    source

   1          //#include "ADCh.h"
   2          #include "stc15f2k60s2.h"
   3          #include <stdio.h>
   4          #include <stdlib.h>
   5          #include "ADCh.h"
   6          #include "AT25SF041.h"
   7          void Wait_ms(int ms);
   8          unsigned int ADC_GetResult(unsigned char ch);
   9          void Move(float  distance, bit direction);
  10          unsigned int Max_Value(unsigned int *input);
  11          void Update_position(unsigned char mnths,unsigned char dys,
  12                               unsigned char hurs,unsigned char mns,unsigned char sconds,
  13                               float  *currnt_pos, float offset_calib);
  14          unsigned int Day_Of_Year(unsigned char months_bcd,unsigned char days_bcd); // this function is used to cou
             -nt the date in a year example: 22 March is the 80th day of the year
  15          void WriteData(unsigned char dat);
  16          void Command(unsigned char dat);//dat=0x0X
  17          void Display_Pos(float sign_dat);
  18          // read adc ch to sense the voltage of the solar panel.     
  19          
  20          int voltage_is_stable(void)
  21          {
  22   1        unsigned int sample_voltage[10];
  23   1        int i,ch=0;
  24   1        for (i=0; i<10;i++)
  25   1        {
  26   2              sample_voltage[i]=ADC_GetResult(ch);
  27   2        }
  28   1        
  29   1        for(i=1;i<=9;i++)
  30   1        {
  31   2              if(abs(sample_voltage[i]-sample_voltage[0])>ADC_Stable_Threshold)
  32   2                return 0;
  33   2        }
  34   1        return 1;
  35   1      }
  36          void  Find_Real_Max(float  *current_position, unsigned int *calib_max_ADC_Value,unsigned int *max_ADC_JP_v
             -alue, unsigned long int *address_to_write)
  37          {
  38   1          unsigned char ch=0;
  39   1          float calib_step_move=0.5;
  40   1          unsigned int voltage_at_scanned_pos[60],max_location;
  41   1          int i;
  42   1          // move/scan +`
  43   1          for(i=0;i<60;i++)
  44   1          {
  45   2            voltage_at_scanned_pos[i]=0;
  46   2          }
  47   1          for(i=0;i<60;i++)
  48   1          {
  49   2              if(ADC_GetResult(2)>=sunlight_ADC_Threshold)
  50   2              {
  51   3                Move(calib_step_move,1);
  52   3                *current_position=*current_position+0.5;
C51 COMPILER V9.52.0.0   CALIBRATION                                                       02/27/2019 14:50:34 PAGE 2   

  53   3                voltage_at_scanned_pos[i]=ADC_GetResult(ch);
  54   3                //  Because the uC Flash Memory is almost full, 
  55   3                //  so I did not change/increase the size of "struct data_to_store"
  56   3                //  STORE THE CALIB VOLTAGE IN THE SPI NOR FLASH after every 1mm
  57   3                if(i%2==0)
  58   3                {
  59   4                  AT25SF041_WriteEnable();
  60   4                  //Wait_ms_SPINOR(50); 
  61   4                  AT25SF041_Write(Byte_Page_Program, *address_to_write,voltage_at_scanned_pos[i]/4);  
  62   4                  Wait_ms_SPINOR(50); 
  63   4                  ++*address_to_write;
  64   4                }
  65   3                  
  66   3              }
  67   2              else
  68   2              {
  69   3                // go back to JP max position
  70   3                if(i<=29)
  71   3                  Move(calib_step_move*(29-(i-1)),1);//
  72   3                  //*current_position=*current_position+calib_step_move*(29-i);
  73   3                else
  74   3                  Move(calib_step_move*(i-1-29),0);// 
  75   3                
  76   3                *current_position=*current_position+calib_step_move*(29-(i-1));
  77   3                break;// break FOR LOOP
  78   3              }
  79   2              
  80   2              //move cursor to line 1, pos 6
  81   2              //Write_PI4IOE5V96248(&dat);
  82   2              Command(0x08);
  83   2              Command(0x05);
  84   2              
  85   2              WriteData(0x41);//display "A"
  86   2              WriteData(0x44);//display "D"
  87   2              WriteData(0x43);//display "C" 
  88   2              WriteData(0x3A);//display ":" 
  89   2              //LCD_clear();
  90   2              //real_voltage=(float)voltage_at_scanned_pos[i]/1024*5;
  91   2              Display_Pos((float)voltage_at_scanned_pos[i]/1024*5);
  92   2              WriteData(0x56);//display "V" 
  93   2              WriteData(0x10);//display " " 
  94   2              Wait_ms(1500);
  95   2          }
  96   1      
  97   1          if(i==60)// make sure that all of the calibration value are scanned with GOOD SUN
  98   1          {
  99   2            max_location=Max_Value(voltage_at_scanned_pos);//max_location in an array [0,...,39]
 100   2            *calib_max_ADC_Value=voltage_at_scanned_pos[max_location];
 101   2      
 102   2            *max_ADC_JP_value=voltage_at_scanned_pos[29];
 103   2          
 104   2            // move to the optimal position in the area of +/-10mm from JP max theorical pos
 105   2            Move(calib_step_move*(59-max_location),0);
 106   2            *current_position=*current_position-calib_step_move*(59-max_location);
 107   2            Wait_ms(500);
 108   2          }
 109   1      
 110   1      }
 111          
 112          
 113          unsigned int Max_Value(unsigned int *input)
 114          {
C51 COMPILER V9.52.0.0   CALIBRATION                                                       02/27/2019 14:50:34 PAGE 3   

 115   1        unsigned int max=0,max_location=29,i;
 116   1        //int i;
 117   1        for(i=0;i<=59;i++)
 118   1        {
 119   2          max=max>*(input+i)? max:*(input+i);
 120   2          if (max==*(input+i)&& max!=0)
 121   2            max_location=i;
 122   2        }
 123   1        return max_location;// pos in the array
 124   1        
 125   1      }
 126          //input currnt_pos is the JP max theorical position
 127          float calibration(unsigned char mnths,unsigned char dys,
 128                               unsigned char hurs,unsigned char mns,unsigned char sconds,
 129                               float  *currnt_pos,unsigned int *calib_max_ADC_Val,float *theorical_max_pos,unsigned int *max_A
             -DC_JP_value,unsigned long int *NOR_address_to_write)
 130          {
 131   1        float calib_value=0;
 132   1        unsigned int temporary_calib_max_ADC=0,temp_max_ADC_JP_value=0;//
 133   1        unsigned long int temp_NOR_address_to_write=*NOR_address_to_write;
 134   1        float JP_max_pos=*currnt_pos;
 135   1        *calib_max_ADC_Val=0;
 136   1        *max_ADC_JP_value=0;
 137   1        *theorical_max_pos=0;
 138   1        // if voltage is stable 
 139   1        if(voltage_is_stable())
 140   1        {
 141   2          //  move to JP theorical max position-15
 142   2          Update_position(mnths,dys,hurs,mns,sconds,&JP_max_pos,-15);// off set is Zero means we go to  (first, go
             - to JP max theorical position -5)
 143   2          *theorical_max_pos=JP_max_pos+15;// compensate +15 because of previous line.
 144   2          //  find the real max value in the area of JP +/- 15mm
 145   2          Find_Real_Max(&JP_max_pos,&temporary_calib_max_ADC,&temp_max_ADC_JP_value,&temp_NOR_address_to_write); /
             -/find real max and move to real max position
 146   2          
 147   2          *NOR_address_to_write=temp_NOR_address_to_write;
 148   2          
 149   2          *calib_max_ADC_Val=temporary_calib_max_ADC;
 150   2          *max_ADC_JP_value=temp_max_ADC_JP_value;
 151   2          calib_value=JP_max_pos-*theorical_max_pos;
 152   2          *currnt_pos=JP_max_pos;
 153   2          return calib_value;
 154   2        }
 155   1        else
 156   1          return 0;
 157   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1669    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     205
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
